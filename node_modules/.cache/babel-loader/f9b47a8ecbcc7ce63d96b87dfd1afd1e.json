{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yingsizhou/Downloads/react-redux-weather-master/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/yingsizhou/Downloads/react-redux-weather-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nexport var toggleMode = function toggleMode(unit) {\n  return {\n    type: \"TOGGLE_MODE\",\n    mode: unit\n  };\n};\nexport var fetchWeather = function fetchWeather(location) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var current;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // signal that a fetch request is about to begin\n                dispatch(fetch_BEGIN());\n                current = undefined; // first get coordinates of location\n\n                return _context.abrupt(\"return\", axios.get(\"https://maps.googleapis.com/maps/api/geocode/json?address=\".concat(location, \"&key=AIzaSyCBQcamdtpHeWv1PleVkC-a-UzJY5ZtLAI\")).then(function (response) {\n                  // if no coordinates found, reject promise\n                  if (response.data.status !== \"OK\") {\n                    return Promise.reject();\n                  }\n\n                  current = response.data.results[0].formatted_address;\n                  var lat = response.data.results[0].geometry.location.lat;\n                  var lon = response.data.results[0].geometry.location.lng; // then get weather data using coordinates\n\n                  return axios.get(\"https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/9eca4702b41c21c7f307e9fbfe659fc8/\".concat(lat, \",\").concat(lon));\n                }).then(function (response) {\n                  // fetch request was a success, so pass the data to reducer\n                  dispatch(fetch_SUCCESS(response.data, current));\n                }).catch(function (err) {\n                  // fetch request ended in an error\n                  dispatch(fetch_ERROR());\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar fetch_BEGIN = function fetch_BEGIN() {\n  return {\n    type: \"FETCH_BEGIN\"\n  };\n};\n\nvar fetch_SUCCESS = function fetch_SUCCESS(data, location) {\n  return {\n    type: \"FETCH_SUCCESS\",\n    payload: data,\n    location: location\n  };\n};\n\nvar fetch_ERROR = function fetch_ERROR() {\n  return {\n    type: \"FETCH_ERROR\"\n  };\n};","map":{"version":3,"sources":["/Users/yingsizhou/Downloads/react-redux-weather-master/src/redux/actions.js"],"names":["axios","toggleMode","unit","type","mode","fetchWeather","location","dispatch","fetch_BEGIN","current","undefined","get","then","response","data","status","Promise","reject","results","formatted_address","lat","geometry","lon","lng","fetch_SUCCESS","catch","err","fetch_ERROR","payload"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAW;AACjCC,IAAAA,IAAI,EAAE,aAD2B;AAEjCC,IAAAA,IAAI,EAAEF;AAF2B,GAAX;AAAA,CAAnB;AAKP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAc;AACtC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACAA,gBAAAA,QAAQ,CAACC,WAAW,EAAZ,CAAR;AAEIC,gBAAAA,OAJD,GAIWC,SAJX,EAMH;;AANG,iDAOIV,KAAK,CAACW,GAAN,qEAAuEL,QAAvE,mDACFM,IADE,CACG,UAACC,QAAD,EAAc;AAEhB;AACA,sBAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,IAA7B,EAAmC;AAC/B,2BAAOC,OAAO,CAACC,MAAR,EAAP;AACH;;AAEDR,kBAAAA,OAAO,GAAGI,QAAQ,CAACC,IAAT,CAAcI,OAAd,CAAsB,CAAtB,EAAyBC,iBAAnC;AACA,sBAAMC,GAAG,GAAGP,QAAQ,CAACC,IAAT,CAAcI,OAAd,CAAsB,CAAtB,EAAyBG,QAAzB,CAAkCf,QAAlC,CAA2Cc,GAAvD;AACA,sBAAME,GAAG,GAAGT,QAAQ,CAACC,IAAT,CAAcI,OAAd,CAAsB,CAAtB,EAAyBG,QAAzB,CAAkCf,QAAlC,CAA2CiB,GAAvD,CATgB,CAWhB;;AACA,yBAAOvB,KAAK,CAACW,GAAN,iHAAmHS,GAAnH,cAA0HE,GAA1H,EAAP;AACH,iBAdE,EAcAV,IAdA,CAcK,UAACC,QAAD,EAAc;AAClB;AACAN,kBAAAA,QAAQ,CAACiB,aAAa,CAACX,QAAQ,CAACC,IAAV,EAAgBL,OAAhB,CAAd,CAAR;AACH,iBAjBE,EAiBAgB,KAjBA,CAiBM,UAACC,GAAD,EAAS;AACd;AACAnB,kBAAAA,QAAQ,CAACoB,WAAW,EAAZ,CAAR;AACH,iBApBE,CAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BH,CA9BM;;AAgCP,IAAMnB,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAO;AACvBL,IAAAA,IAAI,EAAE;AADiB,GAAP;AAAA,CAApB;;AAIA,IAAMqB,aAAa,GAAG,SAAhBA,aAAgB,CAACV,IAAD,EAAOR,QAAP;AAAA,SAAqB;AACvCH,IAAAA,IAAI,EAAE,eADiC;AAEvCyB,IAAAA,OAAO,EAAEd,IAF8B;AAGvCR,IAAAA,QAAQ,EAAEA;AAH6B,GAArB;AAAA,CAAtB;;AAMA,IAAMqB,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAO;AACvBxB,IAAAA,IAAI,EAAE;AADiB,GAAP;AAAA,CAApB","sourcesContent":["import axios from 'axios';\n\nexport const toggleMode = (unit) => ({\n    type: \"TOGGLE_MODE\",\n    mode: unit\n})\n\nexport const fetchWeather = (location) => {\n    return async (dispatch) => {\n        // signal that a fetch request is about to begin\n        dispatch(fetch_BEGIN())\n\n        let current = undefined;\n\n        // first get coordinates of location\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${location}&key=AIzaSyCBQcamdtpHeWv1PleVkC-a-UzJY5ZtLAI`)\n            .then((response) => {\n                \n                // if no coordinates found, reject promise\n                if (response.data.status !== \"OK\") {\n                    return Promise.reject();\n                }\n\n                current = response.data.results[0].formatted_address\n                const lat = response.data.results[0].geometry.location.lat\n                const lon = response.data.results[0].geometry.location.lng\n\n                // then get weather data using coordinates\n                return axios.get(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/9eca4702b41c21c7f307e9fbfe659fc8/${lat},${lon}`)\n            }).then((response) => {\n                // fetch request was a success, so pass the data to reducer\n                dispatch(fetch_SUCCESS(response.data, current));\n            }).catch((err) => {\n                // fetch request ended in an error\n                dispatch(fetch_ERROR());\n            })\n    }\n}\n\nconst fetch_BEGIN = () => ({\n    type: \"FETCH_BEGIN\"\n})\n\nconst fetch_SUCCESS = (data, location) => ({\n    type: \"FETCH_SUCCESS\",\n    payload: data,\n    location: location\n})\n\nconst fetch_ERROR = () => ({\n    type: \"FETCH_ERROR\",\n})"]},"metadata":{},"sourceType":"module"}